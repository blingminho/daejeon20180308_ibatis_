<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sqlMap 
	PUBLIC "-//ibatis.apache.org//DTD SQL Map 2.0//EN"
	"http://ibatis.apache.org/dtd/sql-map-2.dtd">
<!--
	namespace는 이곳에 설정된 SQL문을 호출해서 사용할 때
	같이 사용되는 이름이다
	(자바에서 package와  비슷한 역할을 한다)
-->
<sqlMap namespace="member">
	<!-- <typeAlias alias="memVO2" type="mvcTest.MemberVO"/> -->
<!--
	이 영역 안에서 사용할 SQL문에 맞는 태그를 사용하여 SQL문을 기술한다
	
	사용할 수 있는 기본 태그들..
	<insert> SQL문장 ~~~~ </insert>
	<update> SQL문장 ~~~~ </update>
	<delete> SQL문장 ~~~~ </delete>
	<select> SQL문장 ~~~~ </select>
	등등...
-->
<!--
	위 태그에서 사용되는 속성들
	- id속성 : 해당 태그를 호출할 떄 <sqlMap>태그의 namespace와
				연결하여 사용하는 이름을 설정한다.
				
	- parametClass속성 : SQL문장에 사용할 데이터가 들어있는 객체를 지정한다
				(보통 VO클래스, 자바의 자료형이름 등이 사용된다.)
				(<typeAlias>태그에 지정한 alias명도 사용할 수 있다.)
	
	- resultClass속성 : select문을 실행한 결과를 담을 객체를 지정한다
				(VO클래스, 자바의 자료형이름, alias명 등을 사용 할 수 있다.)
-->
	<insert id="memInsert" parameterClass="memVO2">
		insert into mymember(mem_id, mem_name, mem_tel, mem_addr)
		values (#mem_id#, #mem_name#, #mem_tel#, #mem_addr#)
	</insert>
	
	<!-- 	<typeAlias>에서 지정한 alias값으로 사용한 예	-->
	<update id="memUpdate" parameterClass="memVO2">
		update mymember set mem_name=#mem_name#, mem_tel=#mem_tel#, mem_addr=#mem_addr# 
		where mem_id=#mem_id#
	</update>
	
	<!--
		parameterClass에 설정되는 값이 단일값(즉, 1개의 데이터)이면
		SQL문에 이 값을 나타내는 변수는 특별히 이름이 정해지지 않았다.
		즉, 사용자가 임의로 지정할 수 있다.
	-->
	<delete id="memDelete" parameterClass="String">
		delete from mymember where mem_id=#mem_id#
	</delete>
	
	
	<!--
		select의 처리결과가 여러개이면 각각의 데이터는 resultClass에 지정한 객체에 담기고
		, 이 각각의 데이터들은 자동으로 List에 저장된다
	-->
	<select id="getMemberAll" resultClass="memVO2">
		select * from mymember
	</select>
	
	<select id="getMember" parameterClass="String" resultClass="memVO2">
		select * from mymember where mem_id=#mem_id#
	</select>
	
</sqlMap>